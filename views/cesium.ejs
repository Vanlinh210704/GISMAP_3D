<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Interactive GeoData Visualization</title>
    <script src="https://cesium.com/downloads/cesiumjs/releases/1.117/Build/Cesium/Cesium.js"></script>
    <link href="https://cesium.com/downloads/cesiumjs/releases/1.117/Build/Cesium/Widgets/widgets.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <style>
        body, html {
            width: 100%;
            height: 100%;
            margin: 0;
            padding: 0;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        #cesiumContainer {
            width: 100%;
            height: 100%;
        }
        #toolbar {
            position: absolute;
            top: 10px;
            left: 50px;
            background: rgba(255, 255, 255, 0.9);
            padding: 10px;
            border-radius: 8px;
            box-shadow: 0 2px 6px rgba(0,0,0,0.3);
            display: none;
            flex-direction: column;
            gap: 10px;
        }
        #toolbar input {
            padding: 8px;
            border: 1px solid #ccc;
            border-radius: 4px;
            width: calc(100% - 20px);
        }
        #filterIcon {
            position: absolute;
            top: 10px;
            left: 10px;
            background: rgba(255, 255, 255, 0.9);
            padding: 10px;
            border-radius: 50%;
            box-shadow: 0 2px 6px rgba(0,0,0,0.3);
            cursor: pointer;
            z-index: 10;
        }
        #filterIcon:hover {
            background: rgba(245, 245, 245, 0.9);
        }
    </style>
</head>
<body>
    <div id="cesiumContainer" class="fullSize"></div>
    <div id="loadingOverlay"></div>
    <div id="filterIcon">
        <i class="fas fa-filter"></i>
    </div>
    <div id="toolbar">
        <input type="text" id="point_data_name" placeholder="Tên điểm dữ liệu" oninput="filterBuildings()">
        <input type="text" id="district" placeholder="Quận" oninput="filterBuildings()">
        <input type="number" id="min_area" placeholder="Diện tích tối thiểu" oninput="filterBuildings()">
        <input type="number" id="max_area" placeholder="Diện tích tối đa" oninput="filterBuildings()">
        <input type="number" id="min_price" placeholder="Giá tối thiểu" oninput="filterBuildings()">
        <input type="number" id="max_price" placeholder="Giá tối đa" oninput="filterBuildings()">
        <input type="number" id="min_height" placeholder="Chiều cao tối thiểu" oninput="filterBuildings()">
        <input type="number" id="max_height" placeholder="Chiều cao tối đa" oninput="filterBuildings()">
    </div>
    <script>
        var viewer = new Cesium.Viewer('cesiumContainer', {
            animation: true,
            timeline: false,
            fullscreenButton: false,
            shouldAnimate: true,
            imageryProvider: false // Disable default imagery provider
        });

        // Add OpenStreetMap imagery layer
        viewer.imageryLayers.addImageryProvider(new Cesium.OpenStreetMapImageryProvider({
            url: 'https://a.tile.openstreetmap.org/'
        }));

        var dataSource;

        function loadGeoJsonData() {
            var geojsonFeature = JSON.parse('<%- geojsonResult %>');
            var promise = Cesium.GeoJsonDataSource.load(geojsonFeature);

            promise.then(function(result) {
                dataSource = result;
                viewer.dataSources.add(dataSource);

                var entities = dataSource.entities.values;
                for (var i = 0; i < entities.length; i++) {
                    var entity = entities[i];
                    var pointDataName = entity.properties.point_data_name.getValue();
                    entity.polygon.material = getColorByPointDataName(pointDataName);
                    entity.polygon.extrudedHeight = getHeightPropertyValue(entity.properties.height);
                }

                viewer.zoomTo(dataSource);
            }).catch(function(error) {
                console.error("Error loading GeoJSON:", error);
            });
        }

        function getColorByPointDataName(pointDataName) {
            switch (pointDataName.toLowerCase()) {
                case "house": return Cesium.Color.fromCssColorString('rgba(255, 182, 193, 0.6)'); // Light Pink
                case "school": return Cesium.Color.fromCssColorString('rgba(144, 238, 144, 0.6)'); // Light Green
                case "hospital": return Cesium.Color.fromCssColorString('rgba(173, 216, 230, 0.6)'); // Light Blue
                case "shopping mall": return Cesium.Color.fromCssColorString('rgba(222, 184, 135, 0.6)'); // BurlyWood
                case "apartment": return Cesium.Color.fromCssColorString('rgba(255, 192, 203, 0.6)'); // Pink
                case "university": return Cesium.Color.fromCssColorString('rgba(144, 238, 144, 0.6)'); // Light Green
                default: return Cesium.Color.fromRandom({ alpha: 0.6 });
            }
        }

        function getHeightPropertyValue(heightProperty) {
            var heightValue = parseFloat(heightProperty.getValue());
            return isNaN(heightValue) ? 0 : heightValue;
        }

        function filterBuildings() {
            var pointDataNameInput = document.getElementById('point_data_name').value.toLowerCase();
            var districtInput = document.getElementById('district').value.toLowerCase();
            var minAreaInput = parseFloat(document.getElementById('min_area').value);
            var maxAreaInput = parseFloat(document.getElementById('max_area').value);
            var minPriceInput = parseFloat(document.getElementById('min_price').value);
            var maxPriceInput = parseFloat(document.getElementById('max_price').value);
            var minHeightInput = parseFloat(document.getElementById('min_height').value);
            var maxHeightInput = parseFloat(document.getElementById('max_height').value);

            var entities = dataSource.entities.values;
            var filteredEntities = [];

            for (var i = 0; i < entities.length; i++) {
                var entity = entities[i];
                var pointDataName = entity.properties.point_data_name.getValue().toLowerCase();
                var district = entity.properties.district.getValue().toLowerCase();
                var area = parseFloat(entity.properties.area.getValue());
                var price = parseFloat(entity.properties.price.getValue());
                var height = parseFloat(entity.properties.height.getValue());

                var show = true;
                if (pointDataNameInput !== "" && pointDataName !== pointDataNameInput) {
                    show = false;
                } else if (districtInput !== "" && district !== districtInput) {
                    show = false;
                } else if ((!isNaN(minAreaInput) && (isNaN(area) || area < minAreaInput)) || (!isNaN(maxAreaInput) && (isNaN(area) || area > maxAreaInput))) {
                    show = false;
                } else if ((!isNaN(minPriceInput) && (isNaN(price) || price < minPriceInput)) || (!isNaN(maxPriceInput) && (isNaN(price) || price > maxPriceInput))) {
                    show = false;
                } else if ((!isNaN(minHeightInput) && (isNaN(height) || height < minHeightInput)) || (!isNaN(maxHeightInput) && (isNaN(height) || height > maxHeightInput))) {
                    show = false;
                }

                entity.show = show;

                if (show) {
                    filteredEntities.push(entity);
                }
            }

            if (filteredEntities.length > 0) {
                var boundingSphere = Cesium.BoundingSphere.fromEntities(filteredEntities);
                viewer.camera.flyToBoundingSphere(boundingSphere);
            }
        }

        document.getElementById('filterIcon').addEventListener('click', function() {
            var toolbar = document.getElementById('toolbar');
            if (toolbar.style.display === 'none' || toolbar.style.display === '') {
                toolbar.style.display = 'flex';
            } else {
                toolbar.style.display = 'none';
            }
        });

        loadGeoJsonData();
    </script>
</body>
</html>
